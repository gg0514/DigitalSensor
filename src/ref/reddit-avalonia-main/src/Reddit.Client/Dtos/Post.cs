using System.Text.Json.Serialization;

namespace Reddit.Client.Dtos;

public record Post(
    [property: JsonPropertyName("approved_at_utc")] object ApprovedAtUtc,
    [property: JsonPropertyName("subreddit")] string Subreddit,
    [property: JsonPropertyName("selftext")] string Selftext,
    [property: JsonPropertyName("author_fullname")] string AuthorFullname,
    [property: JsonPropertyName("saved")] bool? Saved,
    [property: JsonPropertyName("mod_reason_title")] object ModReasonTitle,
    [property: JsonPropertyName("gilded")] int? Gilded,
    [property: JsonPropertyName("clicked")] bool? Clicked,
    [property: JsonPropertyName("title")] string Title,
    [property: JsonPropertyName("link_flair_richtext")] IReadOnlyList<object> LinkFlairRichtext,
    [property: JsonPropertyName("subreddit_name_prefixed")] string SubredditNamePrefixed,
    [property: JsonPropertyName("hidden")] bool? Hidden,
    [property: JsonPropertyName("pwls")] int? Pwls,
    [property: JsonPropertyName("link_flair_css_class")] object LinkFlairCssClass,
    [property: JsonPropertyName("downs")] int? Downs,
    [property: JsonPropertyName("thumbnail_height")] int? ThumbnailHeight,
    [property: JsonPropertyName("top_awarded_type")] object TopAwardedType,
    [property: JsonPropertyName("hide_score")] bool? HideScore,
    [property: JsonPropertyName("name")] string Name,
    [property: JsonPropertyName("quarantine")] bool? Quarantine,
    [property: JsonPropertyName("link_flair_text_color")] string LinkFlairTextColor,
    [property: JsonPropertyName("upvote_ratio")] double? UpvoteRatio,
    [property: JsonPropertyName("author_flair_background_color")] object AuthorFlairBackgroundColor,
    [property: JsonPropertyName("subreddit_type")] string SubredditType,
    [property: JsonPropertyName("ups")] int? Ups,
    [property: JsonPropertyName("total_awards_received")] int? TotalAwardsReceived,
    [property: JsonPropertyName("media_embed")] MediaEmbed MediaEmbed,
    [property: JsonPropertyName("thumbnail_width")] int? ThumbnailWidth,
    [property: JsonPropertyName("author_flair_template_id")] object AuthorFlairTemplateId,
    [property: JsonPropertyName("is_original_content")] bool? IsOriginalContent,
    [property: JsonPropertyName("user_reports")] IReadOnlyList<object> UserReports,
    [property: JsonPropertyName("secure_media")] SecureMedia SecureMedia,
    [property: JsonPropertyName("is_reddit_media_domain")] bool? IsRedditMediaDomain,
    [property: JsonPropertyName("is_meta")] bool? IsMeta,
    [property: JsonPropertyName("category")] object Category,
    [property: JsonPropertyName("secure_media_embed")] SecureMediaEmbed SecureMediaEmbed,
    [property: JsonPropertyName("link_flair_text")] object LinkFlairText,
    [property: JsonPropertyName("can_mod_post")] bool? CanModPost,
    [property: JsonPropertyName("score")] int? Score,
    [property: JsonPropertyName("approved_by")] object ApprovedBy,
    [property: JsonPropertyName("is_created_from_ads_ui")] bool? IsCreatedFromAdsUi,
    [property: JsonPropertyName("author_premium")] bool? AuthorPremium,
    [property: JsonPropertyName("thumbnail")] string Thumbnail,
    // [property: JsonPropertyName("edited")] bool Edited, // sometimes it's a number, sometimes a bool, use EditedJsonConverter?
    [property: JsonPropertyName("author_flair_css_class")] object AuthorFlairCssClass,
    [property: JsonPropertyName("author_flair_richtext")] IReadOnlyList<object> AuthorFlairRichtext,
    [property: JsonPropertyName("gildings")] Gildings Gildings,
    [property: JsonPropertyName("post_hint")] string PostHint,
    [property: JsonPropertyName("content_categories")] object ContentCategories,
    [property: JsonPropertyName("is_self")] bool? IsSelf,
    [property: JsonPropertyName("mod_note")] object ModNote,
    [property: JsonPropertyName("created")] double? Created,
    [property: JsonPropertyName("link_flair_type")] string LinkFlairType,
    [property: JsonPropertyName("wls")] int? Wls,
    [property: JsonPropertyName("removed_by_category")] object RemovedByCategory,
    [property: JsonPropertyName("banned_by")] object BannedBy,
    [property: JsonPropertyName("author_flair_type")] string AuthorFlairType,
    [property: JsonPropertyName("domain")] string Domain,
    [property: JsonPropertyName("allow_live_comments")] bool? AllowLiveComments,
    [property: JsonPropertyName("selftext_html")] object SelftextHtml,
    [property: JsonPropertyName("likes")] object Likes,
    [property: JsonPropertyName("suggested_sort")] object SuggestedSort,
    [property: JsonPropertyName("banned_at_utc")] object BannedAtUtc,
    [property: JsonPropertyName("url_overridden_by_dest")] string UrlOverriddenByDest,
    [property: JsonPropertyName("view_count")] object ViewCount,
    [property: JsonPropertyName("archived")] bool? Archived,
    [property: JsonPropertyName("no_follow")] bool? NoFollow,
    [property: JsonPropertyName("is_crosspostable")] bool? IsCrosspostable,
    [property: JsonPropertyName("pinned")] bool? Pinned,
    [property: JsonPropertyName("over_18")] bool? Over18,
    [property: JsonPropertyName("preview")] Preview Preview,
    [property: JsonPropertyName("all_awardings")] IReadOnlyList<object> AllAwardings,
    [property: JsonPropertyName("awarders")] IReadOnlyList<object> Awarders,
    [property: JsonPropertyName("media_only")] bool? MediaOnly,
    [property: JsonPropertyName("can_gild")] bool? CanGild,
    [property: JsonPropertyName("spoiler")] bool? Spoiler,
    [property: JsonPropertyName("locked")] bool? Locked,
    [property: JsonPropertyName("author_flair_text")] object AuthorFlairText,
    [property: JsonPropertyName("treatment_tags")] IReadOnlyList<object> TreatmentTags,
    [property: JsonPropertyName("visited")] bool? Visited,
    [property: JsonPropertyName("removed_by")] object RemovedBy,
    [property: JsonPropertyName("num_reports")] object NumReports,
    [property: JsonPropertyName("distinguished")] object Distinguished,
    [property: JsonPropertyName("subreddit_id")] string SubredditId,
    [property: JsonPropertyName("author_is_blocked")] bool? AuthorIsBlocked,
    [property: JsonPropertyName("mod_reason_by")] object ModReasonBy,
    [property: JsonPropertyName("removal_reason")] object RemovalReason,
    [property: JsonPropertyName("link_flair_background_color")] string LinkFlairBackgroundColor,
    [property: JsonPropertyName("id")] string Id,
    [property: JsonPropertyName("is_robot_indexable")] bool? IsRobotIndexable,
    [property: JsonPropertyName("report_reasons")] object ReportReasons,
    [property: JsonPropertyName("author")] string Author,
    [property: JsonPropertyName("discussion_type")] object DiscussionType,
    [property: JsonPropertyName("num_comments")] int? NumComments,
    [property: JsonPropertyName("send_replies")] bool? SendReplies,
    [property: JsonPropertyName("whitelist_status")] string WhitelistStatus,
    [property: JsonPropertyName("contest_mode")] bool? ContestMode,
    [property: JsonPropertyName("mod_reports")] IReadOnlyList<object> ModReports,
    [property: JsonPropertyName("author_patreon_flair")] bool? AuthorPatreonFlair,
    [property: JsonPropertyName("author_flair_text_color")] object AuthorFlairTextColor,
    [property: JsonPropertyName("permalink")] string Permalink,
    [property: JsonPropertyName("parent_whitelist_status")] string ParentWhitelistStatus,
    [property: JsonPropertyName("stickied")] bool? Stickied,
    [property: JsonPropertyName("url")] string Url,
    [property: JsonPropertyName("subreddit_subscribers")] int? SubredditSubscribers,
    [property: JsonPropertyName("created_utc")] double? CreatedUtc,
    [property: JsonPropertyName("num_crossposts")] int? NumCrossposts,
    [property: JsonPropertyName("media")] Media Media,
    [property: JsonPropertyName("is_video")] bool? IsVideo
)
{
    public string TimeSpanFromCreationEpoch => CreatedUtc.TimeSpanFromCreationEpoch();

    public string SelfTextTruncated(int max)
    {
        return Selftext[..Math.Min(max, Selftext.Length)];
    }

    public static Post Fake => new Post(
        ApprovedAtUtc: null!,
        Subreddit: "r/programming",
        Selftext: "This is the selftext content of the post.",
        AuthorFullname: "t2_exampleuser",
        Saved: false,
        ModReasonTitle: null!,
        Gilded: 1,
        Clicked: true,
        Title: "Sample Reddit Post Title",
        LinkFlairRichtext: new List<object> { "Flair Text" },
        SubredditNamePrefixed: "r/programming",
        Hidden: false,
        Pwls: 6,
        LinkFlairCssClass: null!,
        Downs: 0,
        ThumbnailHeight: 120,
        TopAwardedType: null!,
        HideScore: false,
        Name: "t3_examplepost",
        Quarantine: false,
        LinkFlairTextColor: "dark",
        UpvoteRatio: 0.95,
        AuthorFlairBackgroundColor: null!,
        SubredditType: "public",
        Ups: 500,
        TotalAwardsReceived: 2,
        MediaEmbed: new MediaEmbed(),
        ThumbnailWidth: 140,
        AuthorFlairTemplateId: null!,
        IsOriginalContent: true,
        UserReports: new List<object>(),
        SecureMedia: null!,
        IsRedditMediaDomain: true,
        IsMeta: false,
        Category: null!,
        SecureMediaEmbed: new SecureMediaEmbed(),
        LinkFlairText: "Discussion",
        CanModPost: true,
        Score: 550,
        ApprovedBy: null!,
        IsCreatedFromAdsUi: false,
        AuthorPremium: true,
        Thumbnail: "https://example.com/thumbnail.jpg",
        AuthorFlairCssClass: null!,
        AuthorFlairRichtext: new List<object> { "Author Flair" },
        Gildings: new Gildings(),
        PostHint: "self",
        ContentCategories: null!,
        IsSelf: true,
        ModNote: null!,
        Created: 1693897398.0,
        LinkFlairType: "text",
        Wls: 6,
        RemovedByCategory: null!,
        BannedBy: null!,
        AuthorFlairType: "richtext",
        Domain: "self.programming",
        AllowLiveComments: true,
        SelftextHtml: null!,
        Likes: null!,
        SuggestedSort: null!,
        BannedAtUtc: null!,
        UrlOverriddenByDest: "https://www.example.com",
        ViewCount: null!,
        Archived: false,
        NoFollow: false,
        IsCrosspostable: true,
        Pinned: false,
        Over18: false,
        Preview: null!,
        AllAwardings: new List<object>(),
        Awarders: new List<object>(),
        MediaOnly: false,
        CanGild: true,
        Spoiler: false,
        Locked: false,
        AuthorFlairText: null!,
        TreatmentTags: new List<object>(),
        Visited: false,
        RemovedBy: null!,
        NumReports: null!,
        Distinguished: null!,
        SubredditId: "t5_example",
        AuthorIsBlocked: null!,
        ModReasonBy: null!,
        RemovalReason: null!,
        LinkFlairBackgroundColor: "#FF0000",
        Id: "abc123",
        IsRobotIndexable: true,
        ReportReasons: null!,
        Author: "example_user",
        DiscussionType: null!,
        NumComments: 250,
        SendReplies: true,
        WhitelistStatus: "all_ads",
        ContestMode: false,
        ModReports: new List<object>(),
        AuthorPatreonFlair: false,
        AuthorFlairTextColor: null!,
        Permalink: "/r/programming/comments/abc123/sample_post/",
        ParentWhitelistStatus: "all_ads",
        Stickied: false,
        Url: "https://www.reddit.com/r/programming/comments/abc123/sample_post/",
        SubredditSubscribers: 2000000,
        CreatedUtc: 1693897398.0,
        NumCrossposts: 1,
        Media: null!,
        IsVideo: false
    );
}
