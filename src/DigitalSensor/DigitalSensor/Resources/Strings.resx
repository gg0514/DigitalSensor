<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Farewell" xml:space="preserve">
    <value>Goodbye</value>
  </data>
  <data name="Greeting" xml:space="preserve">
    <value>Hello</value>
  </data>
  <data name="SensorType" xml:space="preserve">
    <value>Sensor Type</value>
    <comment>센서 타입</comment>
  </data>
  <data name="SensorData" xml:space="preserve">
    <value>Sensor Data</value>
    <comment>센서 데이터</comment>
  </data>
  <data name="SensorDataMv" xml:space="preserve">
    <value>Sensor Data (mV)</value>
    <comment>센서 데이터 mv</comment>
  </data>
  <data name="Temperature" xml:space="preserve">
    <value>Temperature</value>
    <comment>수온</comment>
  </data>
  <data name="Setting" xml:space="preserve">
    <value>Setting</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="Stop" xml:space="preserve">
    <value>Stop</value>
    <comment>중단버튼</comment>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>Loading</value>
  </data>
  <data name="ZeroCalibration" xml:space="preserve">
    <value>Zero Calibration</value>
  </data>
  <data name="Guide" xml:space="preserve">
    <value>Guide</value>
  </data>
  <data name="CurrentValue" xml:space="preserve">
    <value>Current Value</value>
  </data>
  <data name="CalibrationStatus" xml:space="preserve">
    <value>Calibration Status</value>
  </data>
  <data name="1PSample" xml:space="preserve">
    <value>1P Sample Calibration</value>
  </data>
  <data name="2PBuffer" xml:space="preserve">
    <value>2P Buffer Calibration</value>
  </data>
  <data name="CalibrationValue" xml:space="preserve">
    <value>Calibration Value</value>
  </data>
  <data name="ZeroGuide1" xml:space="preserve">
    <value>1. Put a sensor into DI water.</value>
    <comment>교정지침1</comment>
  </data>
  <data name="ZeroGuide2" xml:space="preserve">
    <value>2. After the sensor stabilized, Press [Apply] button.</value>
    <comment>교정지침2</comment>
  </data>
  <data name="ZeroGuide3" xml:space="preserve">
    <value>3. If you want to cancel calibration, Press [Stop] button.</value>
    <comment>교정지침3</comment>
  </data>
  <data name="1PGuide1" xml:space="preserve">
    <value>1. Put a sensor in the formazine solution.</value>
  </data>
  <data name="1PGuide2" xml:space="preserve">
    <value>2. Adjust the calibration values using the arrows or keypad, and then apply to calibration.</value>
  </data>
  <data name="1PGuide3" xml:space="preserve">
    <value>3. If you want to cancel calibration, Press [Stop] button.</value>
  </data>
  <data name="2PGuide1" xml:space="preserve">
    <value>1. Put a sensor into 1st Buffer.</value>
  </data>
  <data name="2PGuide2" xml:space="preserve">
    <value>2. After the sensor stabilized, Press [Apply] button.</value>
  </data>
  <data name="2PGuide3" xml:space="preserve">
    <value>3. If you want to cancel calibration, Press [Stop] button.</value>
  </data>
  <data name="Information" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="StatusReady" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="StatusProgress" xml:space="preserve">
    <value>Progress</value>
  </data>
  <data name="StatusSuccess" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="StatusFail" xml:space="preserve">
    <value>Fail</value>
  </data>
  <data name="MenuHome" xml:space="preserve">
    <value>Home</value>
    <comment>메뉴 홈</comment>
  </data>
  <data name="MenuSetting" xml:space="preserve">
    <value>Setting</value>
    <comment>메뉴 설정</comment>
  </data>
  <data name="MenuCalib" xml:space="preserve">
    <value>Calibration</value>
    <comment>메뉴 교정</comment>
  </data>
  <data name="MenuCalibZero" xml:space="preserve">
    <value>Zero Calibration</value>
    <comment>메뉴 교정-영점교정</comment>
  </data>
  <data name="MenuCalib1PSample" xml:space="preserve">
    <value>1P Sample Calibration</value>
    <comment>메뉴 교정-1P샘플</comment>
  </data>
  <data name="MenuCalib2PBuffer" xml:space="preserve">
    <value>2P Buffer Calibration</value>
    <comment>메뉴 교정-2P버퍼</comment>
  </data>
  <data name="2PBuffer_Message1" xml:space="preserve">
    <value>Shall we start the 1st calibration? </value>
  </data>
  <data name="2PBuffer_Message2" xml:space="preserve">
    <value>Shall we continue with 2nd calibration?</value>
  </data>
  <data name="2PGuide1_1P" xml:space="preserve">
    <value>1. Put a sensor into 1st Buffer.</value>
  </data>
  <data name="2PGuide1_2P" xml:space="preserve">
    <value>1. Put a sensor into 2nd Buffer.</value>
  </data>
  <data name="TempCalibration" xml:space="preserve">
    <value>Temperature Electrode</value>
    <comment>온도교정</comment>
  </data>
  <data name="TempGuide1" xml:space="preserve">
    <value>1. Put a sensor in the formazine solution.</value>
  </data>
  <data name="TempGuide2" xml:space="preserve">
    <value>2. Adjust the calibration values using the arrows or keypad, and then apply to calibration.</value>
  </data>
  <data name="TempGuide3" xml:space="preserve">
    <value>3. If you want to cancel calibration, Press [Stop] button.</value>
  </data>
  <data name="MenuCalibTemp" xml:space="preserve">
    <value>Temperature Electrode</value>
    <comment>메뉴 교정-온도교정</comment>
  </data>
</root>